plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.12' // 안정적인 버전으로 변경 (또는 3.2.x)
    id 'io.spring.dependency-management' version '1.1.7' // 최신 버전 확인 (현재 1.1.5가 일반적)
}

group = 'com.jaewon'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Web & REST API
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // 데이터베이스 & JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.mysql:mysql-connector-j:8.0.33'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql:9.22.3' // Flyway MySQL 버전 확인

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // GraphQL
    implementation 'org.springframework.boot:spring-boot-starter-graphql'

    // 보안
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5' // 또는 0.12.x (0.12.5가 최신)
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'  // 또는 0.12.x
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5' // 또는 0.12.x

    // 개발 편의성
    compileOnly 'org.projectlombok:lombok:1.18.32' // 최신 버전 확인
    annotationProcessor 'org.projectlombok:lombok:1.18.32' // 최신 버전 확인
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // 테스트
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
    
    // H2 인메모리 데이터베이스 (테스트 및 개발용)
    runtimeOnly 'com.h2database:h2'

    // API 문서화
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0' // 최신 버전 확인 (2.5.0 등)

    // QueryDSL JPA
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    // QueryDSL annotation processor (Jakarta Persistence 용으로 변경)
    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta" // :jpa -> :jakarta
    // JPA API가 annotationProcessor classpath에 있도록 명시 (필수)
    annotationProcessor "jakarta.persistence:jakarta.persistence-api:3.1.0"
}

tasks.named('test') {
    useJUnitPlatform()
}

// QueryDSL 생성 경로 설정
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main {
        java {
            srcDirs += querydslDir // 생성된 Q클래스를 소스셋에 추가
        }
    }
}

// 컴파일 시 QueryDSL Q클래스 생성 디렉토리 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

// clean 작업 시 QueryDSL 생성 디렉토리도 삭제 (선택적이지만 권장)
clean {
    delete file(querydslDir)
}
